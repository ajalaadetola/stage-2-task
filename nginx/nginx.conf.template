events {
    worker_connections 1024;
}

http {
    # Custom log format with Blue/Green observability
    log_format blue_green 'time=$time_iso8601|'
                          'pool=$upstream_http_x_app_pool|'
                          'release=$upstream_http_x_release_id|'
                          'status=$status|'
                          'upstream_status=$upstream_status|'
                          'upstream_addr=$upstream_addr|'
                          'request_time=$request_time|'
                          'upstream_response_time=$upstream_response_time|'
                          'method=$request_method|'
                          'uri=$request_uri|'
                          'client_ip=$remote_addr';

    access_log /var/log/nginx/access.log blue_green;

    # Upstream configuration for Blue/Green deployment
    # =================================================
    upstream app_backend {
        server app_blue:3000 max_fails=1 fail_timeout=3s;
        server app_green:3000 backup;
    }

    server {
        listen 80;
        
        # Health check endpoint for alert_watcher
        location /version {
            add_header Content-Type text/plain;
            return 200 "nginx-blue-green-1.0\n";
        }

        location / {
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # âœ… Forward headers as-is (don't overwrite)
            proxy_pass_request_headers on;

            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        }

        location /fail {
            return 500 "Simulated server error";
        }
    }
}
