
events {
    worker_connections 1024;
}

http {
    # Health check upstream for active monitoring
    upstream health_backend {
        server app_blue:3000 max_fails=2 fail_timeout=3s;
        server app_green:3000 backup;
    }

    # Main upstream with active/backup configuration
    upstream app_backend {
        server app_blue:3000 max_fails=2 fail_timeout=3s;
        server app_green:3000 backup;
    }

    server {
        listen ${PORT};
        
        # Health check endpoint (for monitoring)
        location /healthz {
            proxy_pass http://health_backend/healthz;
            proxy_connect_timeout 1s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            access_log off;
        }

        # Main application endpoints
        location / {
            proxy_pass http://app_backend;
            
            # Preserve application headers
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            
            # Fast timeouts for quick failover
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
            
            # Retry configuration for automatic failover
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 5s;
            
            # Forward client headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Chaos endpoints (direct access)
        location ~ ^/chaos/ {
            proxy_pass http://app_backend;
            proxy_pass_header X-App-Pool;
            proxy_pass_header X-Release-Id;
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }
    }
}
